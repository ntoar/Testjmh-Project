# JMH version: 1.21
# VM version: JDK 1.8.0_222-4-redhat, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: C:\Users\USUARIO\software\java-1.8.0-openjdk-1.8.0.222-4.b10.redhat.windows.x86_64\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.testjmh.maven_testjmh.MyBenchmark.testMethod
# Parameters: (LISTSIZE = 10)

# Run progress: 0,00% complete, ETA 00:06:40
# Fork: 1 of 1
# Warmup Iteration   1: 0,725 us/op
# Warmup Iteration   2: 0,721 us/op
# Warmup Iteration   3: 0,715 us/op
# Warmup Iteration   4: 0,713 us/op
# Warmup Iteration   5: 0,714 us/op
Iteration   1: 0,713 us/op
Iteration   2: 0,713 us/op
Iteration   3: 0,712 us/op
Iteration   4: 0,714 us/op
Iteration   5: 0,741 us/op


Result "com.testjmh.maven_testjmh.MyBenchmark.testMethod":
  0,719 ±(99.9%) 0,049 us/op [Average]
  (min, avg, max) = (0,712, 0,719, 0,741), stdev = 0,013
  CI (99.9%): [0,670, 0,767] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_222-4-redhat, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: C:\Users\USUARIO\software\java-1.8.0-openjdk-1.8.0.222-4.b10.redhat.windows.x86_64\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.testjmh.maven_testjmh.MyBenchmark.testMethod
# Parameters: (LISTSIZE = 100)

# Run progress: 25,00% complete, ETA 00:05:03
# Fork: 1 of 1
# Warmup Iteration   1: 4,773 us/op
# Warmup Iteration   2: 4,728 us/op
# Warmup Iteration   3: 4,429 us/op
# Warmup Iteration   4: 4,153 us/op
# Warmup Iteration   5: 4,198 us/op
Iteration   1: 4,209 us/op
Iteration   2: 4,163 us/op
Iteration   3: 4,171 us/op
Iteration   4: 4,161 us/op
Iteration   5: 4,162 us/op


Result "com.testjmh.maven_testjmh.MyBenchmark.testMethod":
  4,173 ±(99.9%) 0,079 us/op [Average]
  (min, avg, max) = (4,161, 4,173, 4,209), stdev = 0,020
  CI (99.9%): [4,095, 4,252] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_222-4-redhat, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: C:\Users\USUARIO\software\java-1.8.0-openjdk-1.8.0.222-4.b10.redhat.windows.x86_64\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.testjmh.maven_testjmh.MyBenchmark.testMethod
# Parameters: (LISTSIZE = 1000)

# Run progress: 50,00% complete, ETA 00:03:21
# Fork: 1 of 1
# Warmup Iteration   1: 39,223 us/op
# Warmup Iteration   2: 38,379 us/op
# Warmup Iteration   3: 38,544 us/op
# Warmup Iteration   4: 38,322 us/op
# Warmup Iteration   5: 38,347 us/op
Iteration   1: 38,265 us/op
Iteration   2: 38,276 us/op
Iteration   3: 38,343 us/op
Iteration   4: 38,293 us/op
Iteration   5: 39,222 us/op


Result "com.testjmh.maven_testjmh.MyBenchmark.testMethod":
  38,480 ±(99.9%) 1,601 us/op [Average]
  (min, avg, max) = (38,265, 38,480, 39,222), stdev = 0,416
  CI (99.9%): [36,879, 40,081] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 1.8.0_222-4-redhat, OpenJDK 64-Bit Server VM, 25.222-b10
# VM invoker: C:\Users\USUARIO\software\java-1.8.0-openjdk-1.8.0.222-4.b10.redhat.windows.x86_64\jre\bin\java.exe
# VM options: -Dfile.encoding=UTF-8
# Warmup: 5 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.testjmh.maven_testjmh.MyBenchmark.testMethod
# Parameters: (LISTSIZE = 10000)

# Run progress: 75,00% complete, ETA 00:01:40
# Fork: 1 of 1
# Warmup Iteration   1: 428,822 us/op
# Warmup Iteration   2: 415,182 us/op
# Warmup Iteration   3: 414,674 us/op
# Warmup Iteration   4: 416,437 us/op
# Warmup Iteration   5: 414,034 us/op
Iteration   1: 414,363 us/op
Iteration   2: 413,666 us/op
Iteration   3: 413,910 us/op
Iteration   4: 413,831 us/op
Iteration   5: 414,015 us/op


Result "com.testjmh.maven_testjmh.MyBenchmark.testMethod":
  413,957 ±(99.9%) 1,001 us/op [Average]
  (min, avg, max) = (413,666, 413,957, 414,363), stdev = 0,260
  CI (99.9%): [412,956, 414,959] (assumes normal distribution)


# Run complete. Total time: 00:06:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark               (LISTSIZE)  Mode  Cnt    Score   Error  Units
MyBenchmark.testMethod          10  avgt    5    0,719 ± 0,049  us/op
MyBenchmark.testMethod         100  avgt    5    4,173 ± 0,079  us/op
MyBenchmark.testMethod        1000  avgt    5   38,480 ± 1,601  us/op
MyBenchmark.testMethod       10000  avgt    5  413,957 ± 1,001  us/op
